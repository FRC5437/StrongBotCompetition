// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Target.h"
#include <math.h>

#define PI 3.14159265
#define FOCAL_LENGTH 589.73

double* targetResults;
double targetDistance; //distance between camera and target
double centerDistance; //quite literally the difference between the two detected centers
double degreesToRotate;
double currentYaw;
const double centerX = 360.0; //(640/2) + offset of 40px to allow for shooter offset from camera
const double tolX = 7.0;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

Target::Target(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::targeting.get());
	Requires(Robot::chassis.get());
	Requires(Robot::navX.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

//focalLength = knownDistance * pixelWidth / knownWidth
//distanceInches = (focalLength * knownWidthInches) / pixelWidth
// Called just before this Command runs the first time
void Target::Initialize() {
	currentYaw = Robot::navX->ahrs->GetYaw();
	targetResults = Robot::targeting->GetTarget();
	double targetX = targetResults[0];
	double targetY = targetResults[1];
	double targetWidth = targetResults[2];
	double targetHeight = targetResults[3];

	centerDistance = targetX - 360.0;
	double knownWidthInches = AdjustTargetWidthForSkew(targetWidth, targetHeight);
	double distanceToTargetInches = (FOCAL_LENGTH * knownWidthInches)/ targetWidth;
	double moveWidthInches = (distanceToTargetInches * centerDistance)/FOCAL_LENGTH;

	//degreesToRotate = asin(centerDistance/FOCAL_LENGTH) * 180 / PI;
	degreesToRotate = asin(moveWidthInches/distanceToTargetInches) * 180 / PI;

	SmartDashboard::PutNumber("CHHdegreesToRotate", degreesToRotate);
	SmartDashboard::PutNumber("CHHcurrentYaw", currentYaw);
	SmartDashboard::PutNumber("CHHtargetYaw", currentYaw+degreesToRotate);
	SmartDashboard::PutNumber("CHHcenterDistancePixels", centerDistance);
	SmartDashboard::PutNumber("CHHtargetX", targetX);
	SmartDashboard::PutNumber("CHHDistanceToTargetInches", distanceToTargetInches);
	SmartDashboard::PutNumber("CHHmoveWidthInches", moveWidthInches);
	SmartDashboard::PutNumber("CHHknownWidthInches", knownWidthInches);

	Robot::chassis->SetSetpoint(currentYaw+degreesToRotate);
	Robot::chassis->Enable();
}

// Called repeatedly when this Command is scheduled to run
void Target::Execute() {
	SmartDashboard::PutNumber("Yaw", Robot::navX->ahrs->GetYaw());
}

double Target::AdjustTargetWidthForSkew( double width, double height) {
	double trueTargetWidth = 20.0;
	double idealTargetWidthHeightRatio = 0.547;
	double currentTargetWidthHeightRatio = width / height;
	double adjustedTargetWidth = 20.0;

	if (currentTargetWidthHeightRatio > 0.60){
		adjustedTargetWidth = 19.5;
	}
	else if (currentTargetWidthHeightRatio > 0.65) {
		adjustedTargetWidth = 19.0;
	}
	else if (currentTargetWidthHeightRatio > 0.70) {
		adjustedTargetWidth = 18.5;
	}
	else if (currentTargetWidthHeightRatio > 0.75) {
		adjustedTargetWidth = 18.0;
		}
	else if (currentTargetWidthHeightRatio > 0.80) {
		adjustedTargetWidth = 17.5;
		}
	else if (currentTargetWidthHeightRatio > 0.85) {
		adjustedTargetWidth = 17.0;
		}

	return adjustedTargetWidth;
}

// Make this return true when this Command no longer needs to run execute()
bool Target::IsFinished() {
    return Robot::chassis->OnTarget();
}

// Called once after isFinished returns true
void Target::End() {
	Robot::chassis->Disable();
	Wait(0.35);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Target::Interrupted() {
	Robot::chassis->Disable();
}
