// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Targeting.h"
#include "../RobotMap.h"

std::shared_ptr<NetworkTable> grip;

const double FOCAL_LENGTH = 595;	//pixels; not calculated, but estimated
const double TARGET_WIDTH = 20.0;	//inches

const double FOCAL_TARGET_WIDTH = FOCAL_LENGTH * TARGET_WIDTH; //pixel-inches; should be 14961.50

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Targeting::Targeting() : Subsystem("Targeting") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	targetx = 0.0;
	grip = NetworkTable::GetTable("GRIP");
}

void Targeting::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
double Targeting::GetTarget() {
	auto widths = grip->GetNumberArray("myContoursReport/width", llvm::ArrayRef<double>()),
			centerX = grip->GetNumberArray("myContoursReport/centerX", llvm::ArrayRef<double>());

	double targetWidth = -1.0, temp = 0.0;
	for (uint i = 0; i < widths.size(); i++) {
		if (widths[i] > targetWidth) {
			targetWidth = widths[i];
			temp = centerX[i];
		}
	}

	if (targetWidth >= 0.0) {
		targetx = temp;
	}
	return targetx;
}

double Targeting::GetHeight() {
	auto widths = grip->GetNumberArray("myContoursReport/width", llvm::ArrayRef<double>()),
			centerY = grip->GetNumberArray("myContoursReport/centerY", llvm::ArrayRef<double>());

	double targetWidth = -1.0, temp = 0.0;
	for (uint i = 0; i < widths.size(); i++) {
		if (widths[i] > targetWidth) {
			targetWidth = widths[i];
			temp = centerY[i];
		}
	}

	if (targetWidth >= 0.0) {
		targetx = temp;
	}
	return targetx;
}

double Targeting::GetDistance() {
	auto widths = grip->GetNumberArray("myContoursReport/width", llvm::ArrayRef<double>());

	double widthPixels = -1.0;
	for (uint i = 0; i < widths.size(); i++) {
		if (widths[i] > widthPixels) {
			widthPixels = widths[i];
		}
	}

	return (FOCAL_TARGET_WIDTH / widthPixels); // distance calculation
}

