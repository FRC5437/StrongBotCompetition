// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Targeting.h"
#include "../RobotMap.h"

std::shared_ptr<NetworkTable> grip;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Targeting::Targeting() : Subsystem("Targeting") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	targetx = 0.0;
	grip = NetworkTable::GetTable("GRIP");
}

void Targeting::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
double Targeting::GetTarget() {
	auto areas = grip->GetNumberArray("myContoursReport/width", llvm::ArrayRef<double>()),
			centerX = grip->GetNumberArray("myContoursReport/centerX", llvm::ArrayRef<double>());

	double targetArea = -1.0, temp = 0.0;
	for (uint i = 0; i < areas.size(); i++) {
		if (areas[i] > targetArea) {
			targetArea = areas[i];
			temp = centerX[i];
		}
	}

	if (targetArea >= 0.0) {
		targetx = temp;
	}
	return targetx;
}

