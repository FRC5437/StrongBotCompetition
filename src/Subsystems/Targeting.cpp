// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Targeting.h"
#include "../RobotMap.h"

std::shared_ptr<NetworkTable> grip;

const double FOCAL_LENGTH = 583.515625;	//pixels; not calculated, but estimated
const double TARGET_WIDTH = 20.0;	//inches

const double FOCAL_TARGET_WIDTH = FOCAL_LENGTH * TARGET_WIDTH; //pixel-inches; should be 14961.50

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Targeting::Targeting() : Subsystem("Targeting") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	targetx = 0.0;
	grip = NetworkTable::GetTable("GRIP");
}

void Targeting::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
double* Targeting::GetTarget() {
	static double results[4];
	auto areas = grip->GetNumberArray("myContoursReport/area", llvm::ArrayRef<double>()),
		 centerX = grip->GetNumberArray("myContoursReport/centerX", llvm::ArrayRef<double>()),
		 centerY = grip->GetNumberArray("myContoursReport/centerY", llvm::ArrayRef<double>()),
		 width = grip->GetNumberArray("myContoursReport/width", llvm::ArrayRef<double>()),
		 height = grip->GetNumberArray("myContoursReport/height", llvm::ArrayRef<double>());

	double targetWidth = -1.0;
	int index = -1;
	for (uint i = 0; i < areas.size(); i++) {
		if (areas[i] > targetWidth) {
			targetWidth = areas[i];
			index = i;
		}
	}

	if (targetWidth >= 0.0) {
		results[0] = centerX[index];
		results[1] = centerY[index];
		results[2] = width[index];
		results[3] = height[index];
	}
	return results;
}

double Targeting::GetHeight() {
	auto widths = grip->GetNumberArray("myContoursReport/width", llvm::ArrayRef<double>()),
			centerY = grip->GetNumberArray("myContoursReport/centerY", llvm::ArrayRef<double>());

	double targetWidth = -1.0, temp = 0.0;
	for (uint i = 0; i < widths.size(); i++) {
		if (widths[i] > targetWidth) {
			targetWidth = widths[i];
			temp = centerY[i];
		}
	}

	if (targetWidth >= 0.0) {
		targetx = temp;
	}
	return targetx;
}

double Targeting::GetDistance() {
	auto widths = grip->GetNumberArray("myContoursReport/width", llvm::ArrayRef<double>()),
			targetHeights = grip->GetNumberArray("myContoursReport/height", llvm::ArrayRef<double>());

	double widthPixels = -1.0;
	double heightPixels = 0.0;
	for (uint i = 0; i < widths.size(); i++) {
		if (widths[i] > widthPixels) {
			widthPixels = widths[i];
			heightPixels = targetHeights[i];
		}
	}

	//double distHypotenuse = ((FOCAL_LENGTH * AdjustTargetWidthForSkew(widthPixels, heightPixels)) / widthPixels); // distance calculation
	double distGround =  144; //sqrt((pow(distHypotenuse, 2.0)) - pow(92.75, 2.0)); //92.75 is the approximate distance in inches from the camera's height to the target's height
	SmartDashboard::PutNumber("Distance from target", distGround);
	return distGround;
}

double Targeting::AdjustTargetWidthForSkew( double width, double height) {
	double trueTargetWidth = 20.0;
	double idealTargetWidthHeightRatio = 0.547;
	double currentTargetWidthHeightRatio = width / height;
	double adjustedTargetWidth = 20.0;

	if (currentTargetWidthHeightRatio > 0.60){
		adjustedTargetWidth = 20.0;
	}
	else if (currentTargetWidthHeightRatio > 0.65) {
		adjustedTargetWidth = 19.5;
	}
	else if (currentTargetWidthHeightRatio > 0.70) {
		adjustedTargetWidth = 19.0;
	}
	else if (currentTargetWidthHeightRatio > 0.75) {
		adjustedTargetWidth = 18.5;
		}
	else if (currentTargetWidthHeightRatio > 0.80) {
		adjustedTargetWidth = 18.0;
		}
	else if (currentTargetWidthHeightRatio > 0.85) {
		adjustedTargetWidth = 17.5;
		}

	return adjustedTargetWidth;
}

double Targeting::TargetX() {
	return GetTarget()[0];
}

double Targeting::TargetY() {
	return GetTarget()[1];
}
